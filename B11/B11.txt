科目名: プログラミング実習III
課題: B11
番号: 37022503
氏名: 山形 隼士
作成: 2023/12/19

----------------------------------------
[課題11.1]
[List 11.1] は, aaa, bbb, ccc と言う 3 つのクラスについて, コンストラクタ, デストラクタが呼ばれ
る毎にその旨を表示するようにしたものである. このプログラムを実行し, 結果を分析した。 

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B11 % g++ -Wall 3_1.cpp
gatahayato@Gatas-MacBook-Pro B11 % ./a.out
aaa()
bbb()
bbb()
bbb()
aaa()
aaa(3,4)
∼aaa()
aaa(7,4)
∼aaa()
aaa(7,4)
∼aaa()
aaa(7,4)
∼aaa()
∼aaa()
aaa()
bbb()
ccc()
∼ccc()
∼bbb()
∼aaa()
∼bbb()
∼bbb()
∼bbb()
∼aaa()

以下、各行の出力がプログラムの中でどのように呼び出されたかを述べる。
aaa()
このコンストラクタはmain関数の中のaaa aの行で呼び出されている。
bbb()
bbb()
bbb()
このコンストラクタはmain関数の中のbbb x[3]の行で呼び出されている。なお、行列の要素数が3のため、３回コンストラクタが呼び出されている。
aaa()
このコンストラクタはmain関数の中のp = new aaaの行で呼び出されている。
aaa(3,4)
このコンストラクタはmain関数の中のa = aaa(3, 4)の行で呼び出されている。
∼aaa()
このデストラクタはひとつ上のa(3, 4)が定義されたのち、破棄された時に呼び出されている。
aaa(7,4)
∼aaa()
aaa(7,4)
∼aaa()
aaa(7,4)
∼aaa()
これらのコンストラクタとデストラクタはmain関数中のforループにて３回呼び出されている。
∼aaa()
このデストラクタは、main関数中のdelete p行にてpが破棄されたため呼び出されている。
aaa()
bbb()
ccc()
これら三つのコンストラクタはmain関数内の ccc c;の行にてccc型の変数が定義されたため、
ccc型の中のaaa型のコンストラクタとbbb型のコンストラクタが呼び出され、その後、ccc型のコンストラクタが呼び出されている。
∼ccc()
∼bbb()
∼aaa()
これら三つのデストラクタは、プログラムが終了したため、上記のccc型の変数が破棄される際に呼び出されている。
∼bbb()
∼bbb()
∼bbb()
これら三つのデストラクタも同様に、x[3]配列が破棄される際に呼び出されている。
∼aaa()
このデストラクタも同様に、プログラムが終了した際にaオブジェクトが破棄される際に呼び出されている。

コンストラクタとデストラクタがどのタイミングで呼び出されているのかを観察することができた。
特にクラスのメンバー内の定義をする際にデフォルトコンストラクタの連鎖が起こることを確認することができた。
また、クラスのメンバー内にてデストラクタはコンストラクトの逆順に呼び出されるということを知ることができた。

----------------------------------------
[課題11.2]
trace を実際に使用した。 [List 11.6] のプログラムを実行し, 予想と結果を比較した。

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B11 % g++ -Wall 3_2.cpp
3_2.cpp:32:13: warning: unused variable 'c' [-Wunused-variable]
        int c = add(i, i * i);
            ^
1 warning generated.
gatahayato@Gatas-MacBook-Pro B11 % ./a.out
main begin
for-loop begin
add begin
add end
for-loop end
for-loop begin
add begin
add end
for-loop end
for-loop begin
add begin
add end
for-loop end
main end

予想では、main関数が始まり、forループのスタートの後、addの計算を実行し、forループを終わる。
また、この動作を３回繰り返すというようなことを表す出力がなされると考えていたが、
予想通りの出力がなされることも、traceを使用することで確認できた。

----------------------------------------
[課題11.3]
Complex に対して, 代入演算, および左辺に右辺の値を足し込む演算 += を定義し, 動作を確認した。

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B11 % g++ -Wall 3_3.cpp
gatahayato@Gatas-MacBook-Pro B11 % ./a.out          
初期状態:
a: 3 + 4i
b: 1 + 2i
bをaに代入後:
a: 1 + 2i
足し算後 (c = a + b):
c: 2 + 4i
+= 操作後 (a += b):
a: 4 + 6i

Complexに対し、代入演算と、左辺に右辺の値を足しこむ演算を定義することができた。
それぞれ、代入、足し算、+=演算をoperatorを使って定義することで、+や=などの記号を使って計算を表すことができた。
まだclassについての理解が不十分だと感じたため、これからもっとclassを使っていきたい。

----------------------------------------
[課題11.4]
[List 11.7], [List 11.8] のプログラムを実行し, どのような結果になるか確認せよ。

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B11 % g++ -Wall 3_4.cpp
gatahayato@Gatas-MacBook-Pro B11 % ./a.out
max=5, sp=3, data=(1 300 500 )
max=5, sp=3, data=(1 300 500 )
a.out(27222,0x1df759ec0) malloc: Double free of object 0x14ae060e0
a.out(27222,0x1df759ec0) malloc: *** set a breakpoint in malloc_error_break to debug
zsh: abort      ./a.out

今回の資料に記されている理由のため、エラーが発生していることを確認できた。
次の課題3_5では、これらのエラーの修正を行なっていく。
----------------------------------------
[課題11.5]
stack に対する代入関数を定義し, 課題 11.4 のプログラムがきちんと動くようにした。

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B11 % g++ -Wall 3_5.cpp
gatahayato@Gatas-MacBook-Pro B11 % ./a.out          
max=5, sp=3, data=(1 300 500 )
max=7, sp=3, data=(1 3 5 )

代入関数を定義することで、課題11.4のプログラムを正常に実行することができた。
基本的には資料に書いてあるように修正を進めることでうまく実装することができた。
各メンバーのコピーをした後のエラーの修正を行ったため、細かな部分を資料を用いて確認することができた。
また、コンストラクタで動的割り当てを行う際には代入の定義を忘れないようにしたい。

----------------------------------------
[課題11.6]
次の [List 11.17] は, Complex のコンストラクタ, デストラクタ, 代入演算の起動に際してメッセージ
を出すようにしたものである. 実行結果について, どの呼出しがプログラム中のどの部分で行われたものか説明した。 

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B11 % g++ -Wall 3_6.cpp
gatahayato@Gatas-MacBook-Pro B11 % ./a.out
Complex(3.14,2.26)
Complex(const Complex&)
Complex()
Complex(const Complex&)
Complex(const Complex&)
Complex()
operator=(const Complex& c)
~Complex()
~Complex()
~Complex()
6.28+4.52i
~Complex()
~Complex()
~Complex()

以下、各行の出力がプログラムの中でどのように呼び出されたかを述べる。
Complex(3.14,2.26)
main関数Complex x(3.14,2.26)にて、コンストラクタが呼び出されている。
Complex(const Complex&)
main関数Complex y = x;にて、コピーコンストラクタが呼び出されている。
Complex()
main関数Complex z;にて、コンストラクタが呼び出されている
Complex(const Complex&)
Complex(const Complex&)
main関数内にて z = x + y;を実行する際に、operator+(Complex a, Complex b)を呼び出すため、
それぞれxとyの値をa,bに代入する際にコンストラクタが２回呼び出されている。
Complex()
operator+(Complex a, Complex b)内にて、Complex cの部分において、コンストラクタが呼び出されている。
operator=(const Complex& c)
x + yの値をzに代入しているため、その部分でコピーインストラクタが呼び出されている。
~Complex()
~Complex()
~Complex()
operator+(Complex a, Complex b)が終了する際に、それぞれa, b, cのデストラクタが呼び出されている。
6.28+4.52i
std::cout << z << std::endl;の出力
~Complex()
~Complex()
~Complex()
プログラムが終了したため、それぞれx, y, zのデストラクタが呼び出されている。

----------------------------------------
[課題11.7]
[List 11.18] のプログラムでどのようなエラーが出るか確認した.

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B11 % g++ -Wall 3_7.cpp
gatahayato@Gatas-MacBook-Pro B11 % ./a.out
max=5, sp=3, data=(0 0 0 )
max=5, sp=3, data=(0 0 0 )
max=6, sp=6, data=(0 0 0 0 21 0 )
a.out(9652,0x1db821ec0) malloc: Double free of object 0x159605d10
a.out(9652,0x1db821ec0) malloc: *** set a breakpoint in malloc_error_break to debug

課題の情報通り、コピーコンストラクタが定義されていないため、
ダブルフリーのエラーが発生している。次の課題では、コピーコンストラクタを定義することで、
このコードを動かせるように改良していく。

----------------------------------------
[課題11.8]
コピーコンストラクタを追加し, [List 11.18] のプログラムが実行できるようにせよ

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B11 % g++ -Wall 3_8.cpp
gatahayato@Gatas-MacBook-Pro B11 % ./a.out          
max=5, sp=3, data=(1 3 5 )
max=5, sp=3, data=(2 4 6 )
max=6, sp=6, data=(1 3 5 2 4 6 )

課題3_7で作成したコードを改良し、実行できるようにした。
基本的にはコピーコンストラクタを定義し、その後にplus関数を少し修正した。
コピーコンストラクタについての理解が足りておらず、かなり時間がかかってしまった。
コンストラクタとデストラクタについて復習してから次の課題を作成したい。

----------------------------------------
[課題11.9]
これまでに作成した Complex, stack の最も新しいバージョンのコンストラクタを 11.3.5 の構文を
用いたものに書き直した.

何かコードを実行する課題ではないため、実行結果は省略する。

課題の内容の通り、コンストラクタ内でのコンストラクタの呼び出しの際の構文を書き換えた。
資料に書いてあったように、こちらの構文の方が初期化の無駄が省けるため、こちらの構文を使ってコードを書いていきたい。

----------------------------------------
[課題 B11 の感想]
今回の課題では、コンストラクタとデストラクタについて勉強した。プロ2では聞いたことがない用語であり、かなり理解することも難しく感じたが、
この内容をマスターしておかないとC++を使いこなすことはできないため、しっかりと資料を読み込み、噛み砕いて理解しておきたい。
課題も残すところ12回目だけになっている。最後まで力を抜かずに作成していきたい。