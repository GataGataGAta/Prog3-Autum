科目名: プログラミング実習III
課題: B1
番号: 37022503
氏名: 山形 隼士
作成: 2023年9月29日

----------------------------------------

[課題 1.1]

1〜10 の各整数 i に対して, i と i2 を表示するプログラムを作成した。

実行結果は次の通りである. 
gatahayato@Gatas-MacBook-Pro B1 % gcc -Wall san.c
gatahayato@Gatas-MacBook-Pro B1 % ./a.out
3
6
9
12
13
15
18
21
23
24
27
30
31
32
33
34
35
36
37
38
39

指定された条件通り、1〜40 までの整数のうち, 3 の倍数か, いずれかの桁が 3 であるものを, 小さい順に出力することができた。
工夫としては、10の位の数字は、10で割った数を使って判定し、1の位の数字は10で割った余りを利用することで判定することができた。
久しぶりにC言語を使うため、for分や、i文の書き方など忘れてしまっていることが多くあった。
特にファイルアクセスは難しく、しっかりと復習しながらコードを書いていきたい。

----------------------------------------

[課題 1.2]

課題(1-1)で作成したプログラム san.c を実行したときの出力を, テキストファイル out.txt に保存した。
また、下記のようなsan-exp.txtを作成し、out.txtと内容が一致するかを確認した。
san-exp.txt
3
6
9
12
13
15
18
21
23
24
27
30
31
32
33
34
35
36
37
38
39

実行結果は(1-1)と同値であるため、割愛する。

問題の条件通り、(1-1)の結果をout.txtに保存することができた。
また、diffを使うことで、san-exp.txtとの差異がないことを確認することができた。
ファイルに出力する際に、少し苦戦してしまった。
しかし、原理は余り難しいようには感じられなかったため、一度うまく出力することができれば問題ないと感じた。
今までファイルアクセスに少し苦手意識があったが使ってみると非常に便利であることがわかった。

----------------------------------------

[課題 1.3]

キーボードから整数 n を入力し, 1〜n までの各整数 i に対して, i と i2 を表示するプログラム sq2.c を作成した.
次に, sq2.c を実行し, 10 を入力した場合の出力をファイル out.txt に保存した.
最後に, out.txt の内容が例題 (1-2) の sq-exp.txt と一致することを確認した.

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B1 % gcc -Wall san2.c
gatahayato@Gatas-MacBook-Pro B1 % ./a.out         
1から99までの整数を入力してください>>>77
3
6
9
12
13
15
18
21
23
24
27
30
31
32
33
34
35
36
37
38
39
42
43
45
48
51
53
54
57
60
63
66
69
72
73
75
gatahayato@Gatas-MacBook-Pro B1 % diff -w san2-exp.txt out.txt

問題の条件通り、1〜n の整数のうち, 3 の倍数か, いずれかの桁が 3 であるものを, 小さい順に出力することができた。
(1-1)で使った考え方を用いることによって、3の倍数か、いずれかの桁が3である数字を判定することができた。
特に苦戦することなく作成することができ、だいぶ感覚が戻ってきたように感じる。
しかし、まだファイルアクセスに慣れることができていないため、さらに多くの課題をこなし、慣れていきたい。

----------------------------------------

[課題 1.4]

標準入力から 4つの実数 x1, y1, x2, y2 を入力し, 2 点 (x1,y1) と (x2,y2) の距離を標準出力に出力するプログラム
dist.c を表示するプログラムを作成した。

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B1 % gcc -Wall dist.c            
gatahayato@Gatas-MacBook-Pro B1 % ./a.out < dist-in.txt > out.txt
実数を四つ入力してください>>>実数を四つ入力してください>>>実数を四つ入力してください>>>
1.4142
5.8310
3.1396
gatahayato@Gatas-MacBook-Pro B1 % diff -w out.txt dist-exp.txt

問題の条件通り、入力された四つの実数の距離を求めて標準出力に出力することができた。
距離を求める関数(dist)内では、(x2-x1)＾2+(y2-y1)^2の平方根を取ることで距離を求めることができた。
プログラミング実習2で勉強したように、できるだけ多く関数を使い、main関数内での記述を少なくしていきたい。

----------------------------------------

[課題 1.5]

標準入力から科目の成績の素点 (0〜100 までの整数) を入力してその GPを小数点以下 1 桁で出力する, 
という動作をデータがなくなるまで繰り返し,最後に GP の平均値を小数点以下3桁で出力するプログラム gpa.c を作成した

gatahayato@Gatas-MacBook-Pro B1 % gcc -Wall gpa.c                
gatahayato@Gatas-MacBook-Pro B1 % ./a.out < gpa-in.txt > out.txt
点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:
点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:
点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:
点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:点数を入力してください:
点数を入力してください:点数を入力してください:点数を入力してください:
4.0
4.0
4.0
3.5
3.5
3.0
3.0
3.0
2.5
2.5
2.0
2.0
2.0
1.5
1.5
1.0
1.0
1.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
1.731
gatahayato@Gatas-MacBook-Pro B1 % diff -w out.txt gpa-exp.txt

問題の条件に合致するように、gpaを計算するコードを作成することができた。
工夫した点としては、無限ループの中にif文を多数書き、その条件に応じた変数をインクリメントすることで
最終的な計算を楽にすることができた。無限ループを利用した書き方は今までにやったことがなかったため、
実行する際に恐怖心があったが、実際に利用してみると、データを手打ちする必要がなく、非常に便利であると感じた。
ファイルを使う際には、これからも無限ループの方式を使っていきたい。

----------------------------------------

[課題 1.6]

品物が n 種類あり, i 番目の品物の重さが weight[i]であるとする. 次のようなプログラム weight.c を作成した
1 まず n を入力する.
2 次に, weight[0], weight[1], …, weight[n-1] を入力する.
3 続いて, 品物の番号 (0〜n-1) の系列を入力する (EOF で終了判定する).
4 で入力した品物の重さの合計を出力 (小数点以下1桁まで) する.

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B1 % gcc -Wall weight.c            
gatahayato@Gatas-MacBook-Pro B1 % ./a.out < weight-in.txt > out.txt
品物の種類を入力:点数を入力してください:点数を入力してください:点数を入力してください:
系列を入力してください:系列を入力してください:系列を入力してください:
系列を入力してください:系列を入力してください
8.8
205.8
gatahayato@Gatas-MacBook-Pro B1 % diff -w out.txt weight-exp.txt

問題の条件どうりの出力を得るプログラムを作成することができた。
プログラムを作成する際に、問題文の3番の部分を誤解してしまい、正しいコードをに辿り着くまでに時間がかかった。
しっかりと問題文を読み、自分の中で手順を吟味してからコード作成に取り組むようにしたい。
それ以外の部分では特に苦戦しなかったが、何度かセグメーションフォルトを発生させてしまった。
配列を定義する際には、必ず要素数を確認するようにしていきたい。

----------------------------------------

[課題 1.7]

標準入力から英単語wを入力し,w中の'a''i','u','e','o'以外を全て'*'に置き換えて, wを出力するプログラムを作成した.
また、上記の動作を英単語"qq"が入力されるまで繰り返し実行するようにした。

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B1 % gcc -Wall aiueo.c               
gatahayato@Gatas-MacBook-Pro B1 % ./a.out < aiueo_in.txt > out.txt
英単語を入力して下さい (qq で終了): 英単語を入力して下さい (qq で終了): 英単語を入力して下さい (qq で終了): 英単語を入力して下さい (qq で終了):
**e*e
**a**ei
**o**a**i**
gatahayato@Gatas-MacBook-Pro B1 % diff -w aiueo_exp.txt out.txt

条件に合致するように、任意の文字を変換して出力するコードを作成することができた。
工夫した点としては、if文を利用し、入力された文字がa,i,u,e,oのいずれかであった場合は何もせず、
それらの文字以外の場合は✳️に置き換えるようにした。
コードを作成している途中、誤って任意の文字を✳️に変換してしまった。しかし、そのコードをもとに少し考え方を変えることで
正解のコードを作成することができたので、これからは失敗してしまった場合もすぐ消すのではなく、
使える部分を探すようにしていきたい。

----------------------------------------

[課題 1.8]

次のような計算を行うプログラム match.c を作成した.
1 整数 k を入力する. (ただし, 1≤k≤10 とする)
2 k 個の整数 a0, a1, …, ak-1 を入力する.
3 整数 n を入力する. (ただし, k≤n≤16 とする)
4 整数 m を入力する. (ただし, 1≤m≤16 とする)
5 次を m 回繰り返す.
 n 個の整数 b0, b1, …, bn-1 入力する.
 ある整数 i について
 bi=a0, bi+1=a1, bi+2=a2, …, bi+k-1=ak-1
 が成り立てば 1 を, そうでなければ 0 を出力し, その後に改行を出力する.

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B1 % gcc -Wall match.c               
gatahayato@Gatas-MacBook-Pro B1 % ./a.out < match-in.txt > out.txt
整数を入力してください:数列の要素を入力してください:nを入力してください:mを入力してください:
6個の整数を入力してください:6個の整数を入力してください:6個の整数を入力してください:
6個の整数を入力してください:6個の整数を入力してください:6個の整数を入力してください:
6個の整数を入力してください:6個の整数を入力してください:6個の整数を入力してください:
6個の整数を入力してください
1
0
1
1
0
1
0
1
0
0
gatahayato@Gatas-MacBook-Pro B1 % diff -w out.txt match-exp.txt

問題の条件に合うように、二つの配列が一致していたら1を、していなければ0を返すコードを作成することができた。
この課題は個人的に非常に難しく、作成するのに5時間ほどかかってしまった。
何度やっても一つ目の配列と二つ目の配列が一致しているのか判定することができず、かなり苦戦してしまった。
結果的にfor文を2つ使った二重ループを利用し、外のループをn-k回、中のループをk回繰り返し、
その中でif文を使い、b[]とa[]の一致を調べるために、findとpairという二つの変数を使い
if(b[i + j] != a[j])とし、変数の値を変えることでうまく作成することができた。
時間がかかってしまったが、最終的に作り上げることができたため、個人的には満足している。

----------------------------------------

[課題 B1 の感想]

久しぶりのC言語であったため、忘れてしまっていることが多くあり、まず思い出すためにかなり時間を使ってしまった。
特に、いくつかの課題のレポートでも述べているが、ファイルアクセスにて非常に苦戦してしまった。
一通り画題を作った後にはだいぶ思い出すことができ、スムーズにコードを作ることができたが、細かい部分をまだ思い出せていないため、
これからの授業中でも復習しながら進めていきたい。また、自分はC言語に対して余り苦手意識等がなく、コードを作っていて楽しいと感じるため
この授業を通じて、さらに高度なC言語の技術を身につけられるようにしていきたい。
改めて、担当の大崎先生、TAの皆様、半年間よろしくお願いいたします。
