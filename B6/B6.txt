科目名: プログラミング実習III
課題: B6
番号: 37022503
氏名: 山形 隼士
作成: 2023/11/6

----------------------------------------
[課題6.1]
次のヒントを参考に, list.c 中の list_print と insert_node とを完成させ, list1test.c が実行できるようにした.
list_node_t はリストを構成するの節点の情報を記憶するための型であり, list.h に定義されている. 
教科書 p. 171 のnode_t と基本的に同じである. 名前が list_node_t となっていることと, 
データ部のメンバ名が value ではなく val になっていることと, 宣言の書き方が違っているだけである.
void list_print(list_node_t *head_p) は, head_p をヘッダとするリストの表示を行う関数である. 
教科書 p. 178 のリスト 6.3 と基本的に同じである.
list_node* insert_node(list_node_t *n, int val) は, ポインタ n が指す節点の直後に値 val を保持する節点を挿入する関数である.
教科書 p. 173 のリスト 6.1 と基本的に同じである. 新しい節点を作る部分を関数 create_node として分離していることや, 
節点を作るのに失敗した場合の処理が異なるだけである.

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B6 % gcc -Wall list1test.c list.c
list.c:82:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:87:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:92:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:97:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:102:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:107:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:112:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:56:13: warning: unused function 'remove_node' [-Wunused-function]
static void remove_node(list_node_t *p)
            ^
8 warnings generated.
gatahayato@Gatas-MacBook-Pro B6 % ./a.out 
input = 3
[ 3 ]
input = 5
[ 5 3 ]
input = 4
[ 4 5 3 ]
input = 3
[ 3 4 5 3 ]
input = % 

この課題においては、全体の機能のうち、入力をリストに挿入する部分と出力する部分のみ実装されている。
教科書の記述を読みながら作成することができた。リストは前回の動的割り当て同様プロ2では扱わなかったので
しっかりと教科書を読み、理解しながら進めていきたい。

----------------------------------------
[課題6.2]
list.c 中の関数 list_find を完成させ, 下記の list2test.c とリンクして動作確認した.

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B6 % gcc list2test.c list.c
list.c:88:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:92:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:96:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:100:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:104:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:108:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
6 warnings generated.
gatahayato@Gatas-MacBook-Pro B6 % ./a.out               
input = 4
[ 4 ]
input = 5
[ 5 4 ]
input = 3
[ 3 5 4 ]
input = 3
[ -3 5 4 ]
input = %

リストに整数値を入力し、同じものが入力された際に符号を反転させることができた。
list_find関数内において、p->valが入力されたvalと同じ時はその接点へのポインタを返し、
それ以外の際にはNULLを返すことで機能を実装することができた。

----------------------------------------
[課題6.3]
list.c 中の関数 list_insert_uniq を完成させ, 下記の list3test.c とリンクして動作確認した.

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B6 % gcc list3test.c list.c
list.c:104:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:108:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:112:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:116:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
list.c:120:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
5 warnings generated.
^[[                                                                                                                                                                
gatahayato@Gatas-MacBook-Pro B6 % ./a.out               
input = 3
[ 3 ]
input = 3
[ 3 ]
input = 4
[ 4 3 ]
input = 2
[ 2 4 3 ]
input = 0
[ 0 2 4 3 ]
input = 

list_insert_uniqを完成させることで、同じ値でない場合のみリストに値を入力することができた。
関数内において、問題文どうり最初にlist_node_t型のfindという変数を定義し、findがNULLでない場合、
すなわち同じ値がない場合のみinsert_node関数を呼び出すことで実装することができた。

----------------------------------------
[課題6.4]
下記の処理を行い, (1)(2)(3) それぞれの処理に要する計算時間を表示するプログラム list4time.c を作成した。

(0) 標準入力から正整数 n を入力する.

(1) 乱数を n 個発生させ, それを list_insert_uniq で順次リストに挿入する.

(2) (1)と同じ乱数を n 個発生させ, list_find でそのデータをリスト中に検索する.

(3) (1)と異なる乱数を n 個発生させ, list_find でそのデータをリスト中に検索する.

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B6 % ./a.out
乱数を何個生成しますか?:15000
一つ目の乱数の挿入 = 1.16859e-05 [sec]
(1)と同じ乱数の検索 = 9.0988e-06 [sec]
新しい乱数の検索 = 1.7827e-05 [sec]

gatahayato@Gatas-MacBook-Pro B6 % ./a.out
乱数を何個生成しますか?:20000
一つ目の乱数の挿入 = 1.34981e-05 [sec]
(1)と同じ乱数の検索 = 1.1601e-05 [sec]
新しい乱数の検索 = 2.3563e-05 [sec]

gatahayato@Gatas-MacBook-Pro B6 % ./a.out
乱数を何個生成しますか?:50000 
一つ目の乱数の挿入 = 2.98594e-05 [sec]
(1)と同じ乱数の検索 = 2.90066e-05 [sec]
新しい乱数の検索 = 5.82468e-05 [sec]

gatahayato@Gatas-MacBook-Pro B6 % ./a.out
乱数を何個生成しますか?:100000
一つ目の乱数の挿入 = 5.84214e-05 [sec]
(1)と同じ乱数の検索 = 5.80239e-05 [sec]
新しい乱数の検索 = 0.000115795 [sec]

nが2倍の数字になっている時に、実行にかかる時間もほぼほぼ2倍に近い値となっている。
また、それぞれの動作では、挿入と探索においてはほぼ同じ時間であるが、nが増加するにおいて動作の時間が増加している。
これはnが大きくなると、その分挿入をする際にチェックに時間がかかるからである。また、新しい値を探索する時にはさらに多くの時間がかかっている。
これは新しい乱数は一つ目の乱数とは違う値であるため、探索に時間がかかるからである。

----------------------------------------
[課題6.5]
list.c 中の関数 list_insert_delete_dup を完成させ, 下記の list5test.c とリンクして動作確認した.

実行結果は以下の通りである。
input = 5
[ 5 ]
input = 4
[ 4 5 ]
input = 4
[ 5 ]
input = %   

list_insert_delete_dup関数の中で、まずlist_find関数を呼び出し、結果をfindという変数に代入することで、
そのfind変数がNULLでない時には、一つ前の接点をwhileループを使い求め、その接点をremove_nodeに入れることで削除することができた。
また、findがNULLの時にlist_insertを使い、リストに数値を代入することができた。

----------------------------------------
[課題6.9]
下に, tree.c, tree.h, tree9test.c を示す. tree.c は二分木の処理を行う関数群の原型, 
tree.h はそのヘッダファイルである. tree9test.c は, 次の動作例のように, 標準入力から次々に整数を読み込んで二分木に挿入し, 
各時点での二分木の内容を表示するプログラムである. ただし, 既に二分木中に同じ値がある場合には, その値の挿入は行わない. 
また, 表示はデータの昇順に行う.

input = 3
[ 3 ]
input = 5
[ 3 5 ]
input = 3
[ 3 5 ]
input = 4
[ 3 4 5 ]
input = ^d     (CTRL+d で入力の終了)

現状のままでも tree9test.c と tree.c をコンパイル＆リンクすると動作する. しかし,
(a) 二分木中にあるデータを入力すると, それが挿入されてしまう.

(b) 表示がデータの昇順にならない.

という問題がある. この問題が解決するように tree.c を修正した. 具体的には次の修正を行え.
(1) (a)の問題が解決するように tree_insert_uniq を修正した

(2) (b)の問題が解決するように tree_print を修正した.
input = 3
[ 3 ]
input = 5
[ 3 5 ]
input = 4
[ 3 4 5 ]
input = 4
[ 3 4 5 ]
input = %

(1)の条件を解決するために、tree_insert_uniqの中にelse if(n->data == val)の条件の際に、
何もせずにnを返すようにした。また、(2)の条件を解決するために、tree_printの表示の順番を変更した。
あまり難しくはなかったが、二分木の内容を忘れてしまっていたので復習に時間がかかってしまった。
データ構造とアルゴリズムの授業にもっと力を入れていきたい。
----------------------------------------
[課題 B6 の感想]
今回の課題ではリストと、二分木について勉強した。リストは配列とは違い、順番にメモリの値を使っているわけではないことがわかったが、
実際にプログラミングをしてみると、かなり難しく感じられた。特に、課題5の接点を削除する動作は、消したい接点の一つ前の接点のアドレスを探すことに苦戦した。
また、二分木の原理を忘れてしまっており、復習に時間がかかってしまったので、データ構造とアルゴリズムの授業資料等をもう一度見直して、データ構造の勉強をしたい。