科目名: プログラミング実習III
課題: O3
番号: 37022503
氏名: 山形 隼士
作成: 2023/1/15

----------------------------------------
[課題3.1]
100点満点の試験の結果をシミュレーションする, 次のようなプログラム exam100.c を作成した。

目標の平均値 (実数) と標準偏差 (実数), および受験者数 (整数) を標準入力から入力する.
教科書 p. 95 を参考に, 入力した平均値と標準偏差に従う正規乱数を発生し, 各受験生の点数とする. ただし, 点数が 0〜100 の整数値となるよう次のような補正を行う.
乱数に四捨五入を行って整数化する.
0 未満の場合は 0 に，100 を超える場合は 100 とする.
このような乱数の点数を受験者の数だけ生成する.
生成した乱数の点数の平均, 標準偏差, および5点刻みの点数区間による度数分布を表示する.
平均75点, 標準偏差10点, 受験者 10人, 1,000人, 10,000人を入力して動作確認せよ. 生成した乱数点数の平均や標準偏差が入力したものと著しく異なる場合には, プログラムに誤りがある可能性がある. なお, 分散は二乗和の平均から平均の二乗を引いた値であり, 標準偏差はその平方根である.
教科書 p. 93 のリスト3.14の myrand 関数は, 環境によっては正しく動作しないので, 代わりに次のコードを使用せよ.
double myrand(void)
{
  static unsigned long r = 53402397UL;
  r = (65539UL * r + 125654UL) & 0x7fffffffUL; 
  return r / (double) 0x80000000UL;
}

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro O3 % gcc -Wall exam100.c
gatahayato@Gatas-MacBook-Pro O3 % ./a.out
平均点、標準偏差、受験者数を入力してください: 75 10 10
平均: 75.300000
標準偏差: 7.470609
度数分布（5点刻み）:
  0-  4: 0
  5-  9: 0
 10- 14: 0
 15- 19: 0
 20- 24: 0
 25- 29: 0
 30- 34: 0
 35- 39: 0
 40- 44: 0
 45- 49: 0
 50- 54: 0
 55- 59: 0
 60- 64: 1
 65- 69: 1
 70- 74: 4
 75- 79: 0
 80- 84: 2
 85- 89: 2
 90- 94: 0
 95- 99: 0
100-104: 0
gatahayato@Gatas-MacBook-Pro O3 % ./a.out
平均点、標準偏差、受験者数を入力してください: 75 10 100 
平均: 74.670000
標準偏差: 9.105004
度数分布（5点刻み）:
  0-  4: 0
  5-  9: 0
 10- 14: 0
 15- 19: 0
 20- 24: 0
 25- 29: 0
 30- 34: 0
 35- 39: 0
 40- 44: 1
 45- 49: 0
 50- 54: 0
 55- 59: 4
 60- 64: 8
 65- 69: 13
 70- 74: 28
 75- 79: 16
 80- 84: 16
 85- 89: 8
 90- 94: 6
 95- 99: 0
100-104: 0
gatahayato@Gatas-MacBook-Pro O3 % ./a.out
平均点、標準偏差、受験者数を入力してください: 75 10 1000
平均: 74.176000
標準偏差: 10.207694
度数分布（5点刻み）:
  0-  4: 0
  5-  9: 0
 10- 14: 0
 15- 19: 0
 20- 24: 0
 25- 29: 0
 30- 34: 0
 35- 39: 0
 40- 44: 2
 45- 49: 4
 50- 54: 19
 55- 59: 62
 60- 64: 100
 65- 69: 137
 70- 74: 177
 75- 79: 178
 80- 84: 172
 85- 89: 88
 90- 94: 37
 95- 99: 15
100-104: 9

100点満点の試験の結果をシュミレートする関数を作成することができた。
frequencyという5点刻みの点数を格納する配列を作成することで、うまく5点刻みで点数区間による度数分布を作成することができた。
また、提供されている乱数を作成する関数を利用することで。乱数を作成し、利用することができた。

----------------------------------------
[課題3.2]
標準入力から単語を EOF を検出するまで次々に入力し, それを下図のようなデータ構造で記憶するプログラム 
strpool.c を作成せよ. 各変数は次のように宣言するものとする。

実行結果は以下のとおりである。
next word = U
next word = R
next word = MY
next word = SPECIAL
next word = ^D
pool    = (0x1043e8008)
word[0] = (0x1043e8008) "U"
word[1] = (0x1043e800a) "R"
word[2] = (0x1043e800c) "MY"
word[3] = (0x1043e800f) "SPECIAL"
next    = (0x1043e8017)

プログラムは標準入力から単語を読み込み、EOFが検出されるまで続けるコードを作成した。
各単語は pool 配列に保存し、各単語のポインタは word 配列に保存した。
単語が入力されるたびにプロンプト next word = を表示し、EOFが検出されたら入力を終了する様にした。
最後に、pool、word 配列、next ポインタの値と単語を出力した。
問題の条件に合わせて進めることでうまく作成することができた。

----------------------------------------
[課題 O3 の感想]
今回の課題ではポインタについて勉強した。初めてポインタを勉強した時にはあまり理解できていなかったが、
C言語をしっかり勉強した今なら理解できる事柄も増えてきた様に感じる。さらにスピードを上げて開発していきたい。