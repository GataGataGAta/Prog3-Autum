科目名: プログラミング実習III
課題: B2
番号: 37022503
氏名: 山形 隼士
作成: 2023年10月6日

----------------------------------------

[課題 2.1]

課題 (1-4) のプログラム dist.c を書き換え, main 関数から次の関数 dist を呼び出すようにした. 
また、main と dist は同じファイル内 (dist2.c とする) に記述した。

実行結果は次の通りである. 
gatahayato@Gatas-MacBook-Pro B2 % gcc dist2.c
gatahayato@Gatas-MacBook-Pro B2 % ./a.out < dist-in.txt > out.txt
実数を四つ入力してください>>>実数を四つ入力してください>>>実数を四つ入力してください>>
1.4142
5.8310
3.1396
gatahayato@Gatas-MacBook-Pro B2 % diff -w out.txt dist-exp.txt

問題の条件通り、課題(1.4)で作成したプログラムdist.cを書き換えて
main関数からdist関数を呼び出すようにした。
自分のプログラムでは、もともとmain関数から呼び出すようにしていたため、
特に修正する箇所なく実行することができた。

----------------------------------------

[課題 2.2]

double 型の値 a, b, c (ただし a≠0 とする) を受け取り、２次方程式 ax2+bx+c=0 の解を標準出力に出力する関数 
void qeq(double a, double b, double c) を作成した. 解は小数点以下 5 桁で, 1 行に出力した. 
また、解が 2 個ある場合には, スペース区切りで小さい順に出力するようにした. 解がない場合は, 改行のみ出力した. 
なお、 改行の出力は qeq 関数の中で行った。
この関数を用いることにより, 次の動作を繰り返し行うプログラム qeq.c を作成した.

[条件]
実数 a, b, c を標準入力から入力し, ２次方程式 ax2+bx+c=0 の全ての解を標準出力に出力する.
ただし, a=0 の場合には繰り返しを終了する.

実行結果は以下の通りである
gatahayato@Gatas-MacBook-Pro B2 % gcc -Wall qeq.c               
gatahayato@Gatas-MacBook-Pro B2 % ./a.out < qeq-in.txt > out.txt
ax^2 + bx + cの係数を入力してください(a=0.0で終了します):ax^2 + bx + cの係数を入力してください(a=0.0で終了します):
ax^2 + bx + cの係数を入力してください(a=0.0で終了します):ax^2 + bx + cの係数を入力してください(a=0.0で終了します):
ax^2 + bx + cの係数を入力してください(a=0.0で終了します):ax^2 + bx + cの係数を入力してください(a=0.0で終了します):
ax^2 + bx + cの係数を入力してください(a=0.0で終了します):ax^2 + bx + cの係数を入力してください(a=0.0で終了します):
ax^2 + bx + cの係数を入力してください(a=0.0で終了します):
gatahayato@Gatas-MacBook-Pro B2 % diff -w out.txt qeq-exp.txt

out.txtの内容は以下の通りである。
-2.00000 -1.00000
-1.00000

-4.13746 -0.36254
-0.74568 2.14568
1.00000
0.37417 3.05440
0.81386 3.68614

問題の条件通り、二次方程式の解を求めて出力する関数を作成することができた。
工夫した点としては、まず解を求める前に判別式を用いて解の個数を求めるようにした。
その中で、判別式が<0であるときには何も出力せずに改行だけ出力することで、
解がない場合の出力を実装することができた。

----------------------------------------

[課題 2.3]
課題 (2-1) で作成したプログラム dist2.c を, 次のファイルに分割し, 分割コンパイルを行った.

関数 main のみを記述した dist3main.c
関数 dist のみを記述した dist3.c
関数 dist のプロトタイプ宣言を記述した dist3.h
コンパイルして実行し, 課題 (1-4) と同じ dist-in.txt に対して 
dist-exp.txt が出力されることを確認した.

実行結果は(2-1)と同じであるため、割愛する。

問題の条件通り、分割コンパイルを使ってdist.cを実行することができた。
実行する際のコマンドが少し理解不足で、実行する際に何度もエラーに遭遇した。
しかし、今回の課題で使い方はしっかりと理解することができたため、
次からの課題でも分割コンパイルを使っていきたい。


----------------------------------------

[課題 2.4]

課題 (2-2) で作成したプログラム qeq.c を, 次のファイルに分割し, 分割コンパイルを行った.

関数 main のみを記述した qeq2main.c
関数 qeq のみを記述した qeq2.c
関数 qeq のプロトタイプ宣言を記述した qeq2.h
課題 (2-2) と同様に, qeq-in.txt の入力に対して期待値 qeq-exp.txt が出力されることを確認した.

実行結果は(2-2)と同じであるため、割愛する。

課題(2-3)と同様に分割コンパイルを使ってqeq.cを実行することができた。
先ほどの課題で使い方を勉強することができたため、今回は苦戦することなく
実行することができた。

----------------------------------------

[課題 2.5]

f(x) = ax2 + bx + c に対し, 区間 [x1, x2] における f(x) = 0 の解を, 
下記の「二分法」により求めて返す関数

double bisection(double x1, double x2, double a, double b, double c, double eps)
を作成した. 

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B2 % gcc bisection.c bisection_main.c             
gatahayato@Gatas-MacBook-Pro B2 % ./a.out < bisection-in.txt > bisction-out.txt
gatahayato@Gatas-MacBook-Pro B2 % diff -w bisection-out.txt bisection-exp.txt

out.txtの内容は以下の通りである。
1.41400000
1.41400000
1.41400000
1.41421887
-1.41424359
1.41418750
1.41421318
7.99999976
3.58113837

2分法を使って、区間[x1, x2]におけるf(x) = 0の解を求めて出力することができた。
2分法自体の存在は知っていたが、実際にプログラミングで利用したことがなかったため、
かなり苦戦してしまった。工夫した点としては、while文を使った無限ループを使い、
指定された条件の場合においてbreakするようにし、それ以外の場合では、符号を使った判定を利用して
範囲を絞ることができた。実際に書いてみるとそこまで難しいものではなかったが、
かなり高度の考え方であると感じたので、しっかりアルゴリズムを理解しておきたい。

----------------------------------------

[課題 2.6]

次のような構造体型を用いて, 下記の指示に従ってプログラム body.c を作成せよ.

#define NM_LEN 31

typedef struct {
  char name[NM_LEN+1];  /* 名前 */
  double stature;       /* 身長 [cm] */
  double weight;        /* 重量 [kg] */
  double bmi;           /* BMI値 */
} body_index_t;

body_index_t 型の変数 x を受け取って, その名前, 身長, 体重, BMIを次のような形式で出力する関数
void body_index_print(body_index_t x) を作成した.
name: Taro
stature: 175.4cm
weight: 65.3kg
BMI: 21.2

body_index_t 型の変数 x を受け取って, BMI 値を返す関数 double bmi(body_index_t x) を作成した。
また、上記の関数を用いて, 次の動作を繰り返すプログラムを作成した.
ある人間の名前, 身長, 体重を標準入力から body_index_t 型変数 p に読み込む. 
ただし, 名前が "q" の場合には繰り返しを終了する.
関数 bmi を使って計算した BMI を p.bmi に代入する.
関数 body_index_print を使って p の情報を出力する.

実行結果は以下の通りである。

atahayato@Gatas-MacBook-Pro B2 % gcc -Wall body.c
gatahayato@Gatas-MacBook-Pro B2 % ./a.out < body-in.txt > out.txt
名前を入力してください:身長を入力してください:体重を入力してください:名前を入力してください:
身長を入力してください:体重を入力してください:名前を入力してください
gatahayato@Gatas-MacBook-Pro B2 % diff -w out.txt body-exp.txt

out.txtの内容は以下の通りである。
name: Taro
stature: 175.4cm
weight: 65.3kg
BMI: 21.2
name: Hanako
stature: 157.3cm
weight: 48.8kg
BMI: 19.7

問題の条件通り、BMIを求めて出力するコードを作成することができた。
問題にヒントがついていたのだが、BMIを計算するときには身長をメートルに直すことを
忘れてしまっており、正確な値を求めることができなかった。また、名前や身長などの出力を
日本語にしてしまっており、diffを取ることで間違いに気づくことができた。

----------------------------------------

[課題 2.7]
課題 (2-3) の dist3.c を次のように書き換えて, dist4.c を作成した.

点を 2 つの double 型変数ではなく, 次のように宣言された point_t 型を用いて表わすようにし, 
関数 double dist(double x1, double y1, double x2, double y2) を, double dist(point_t p1, point_t p2) に書き換えた.
typedef struct {
  double x;   /* x座標 */
  double y;   /* y座標 */
} point_t;

構造体型 point_t の宣言は, 下記のように dist4.h 内に記述せよ. dist4.c から dist4.h をインクルードするようにした.
dist4.h
typedef struct {
  double x;   /* x座標 */
  double y;   /* y座標 */
} point_t;

double dist(point_t p1, point_t p2);

dist4main.c とリンクして実行し, dist-in.txt に対して dist-exp.txt が出力されることを確認した.

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B2 % gcc dist4.c dist4main.c
gatahayato@Gatas-MacBook-Pro B2 % ./a.out < dist-in.txt > out.txt
p1 と p2 の座標 (それぞれ x と y) をスペース区切りで : p2 の座標 (x と y):
p1 と p2 の座標 (それぞれ x と y) をスペース区切りで : p2 の座標 (x と y): 
p1 と p2 の座標 (それぞれ x と y) をスペース区切りで : p2 の座標 (x と y):                                                                                                    
gatahayato@Gatas-MacBook-Pro B2 % diff -w out.txt dist-exp.txt

out.txtの内容は以下の通りである。
1.4142
5.8310
3.1396   

問題の条件通り、構造体を用いて以前の課題を書き換えることができた。
構造体は忘れてしまっている部分もあったが、プログラミング実習2で勉強した際に理解することができていたため、
特に問題なく利用することができた。構造体は非常に有益だと感じているので、
これからもどんどん使っていくようにしたい。

----------------------------------------

[課題 2.8]

2つの整数 a, b を受け取り, 区間 [a,b] の整数値の乱数を発生させて返す関数 irand(int a, int b) を作成した. 
また、この関数を用いて次の操作を行うプログラム irand.c を作成した.

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro B2 % gcc -Wall irand.c
gatahayato@Gatas-MacBook-Pro B2 % ./a.out          
a, b, nの値を入力してください:3 8 50
3 3 7 5 6 4 3 7 7 8 5 6 7 3 3 6 7 3 5 3 5 7 6 8 8
6 3 6 5 7 8 7 4 3 7 4 6 7 8 5 4 8 7 7 6 3 6 8 4 5 
3が出現した回数:10
4が出現した回数:5
5が出現した回数:7
6が出現した回数:9
7が出現した回数:12
8が出現した回数:7

問題の条件通り、疑似乱数を用いて乱数を出力することができた。
乱数はプログラミング実習2において、一度使ったことがあったが、その時は
time.hをインクルードする方式であったため、今回の使い方は初めてであった。
乱数を使うことは余り多くはないかと思われるが、しっかり使えるようになっておきたい。

----------------------------------------

[課題 B2 の感想]
今回の課題では、分割コンパイルというものを勉強した。具体的にどのようなものなのか余り想像ができなかったが、
実際に使ってみると、難しいことはなく、その上コードを短くすることができるので非常に有用だと感じた。
今回の課題で大体の使い方は学ぶことができたので、さらにコードを作成して完璧に使えるようになっていきたい。
また、構造体も復習することができた。少しずつC言語の使い方を思い出してきたので、さらに課題を作成するスピードを上げていきたい。

