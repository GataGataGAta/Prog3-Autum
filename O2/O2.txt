科目名: プログラミング実習III
課題: O2
番号: 37022503
氏名: 山形 隼士
作成: 2023/1/15

----------------------------------------
[課題2.1]
f(x) = ax2 + bx + c (ただし a≠0) に対して, 下記の「ニュートン・ラフソン法」により f(x) = 0 の解を求める関数 
double newton(double a, double b, double c, double x0, double eps, int max_repeat)を作成した。 
ただし, x0 は近似解の初期値, eps は許容誤差, max_repeat は収束計算の繰り返し回数の上限。

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro O2 % gcc -Wall newton.c newton_main.c
gatahayato@Gatas-MacBook-Pro O2 % ./a.out < in.txt > out.txt      
a, b, c, x0, eps, max_repeat を入力 :   0             0.0000000000             1.0000000000             0.2500000000
  1             0.2500000000             0.0625000000             0.2678571429
a, b, c, x0, eps, max_repeat を入力 :   0             1.0000000000             3.0000000000             0.2500000000
  1             0.2500000000            -1.1250000000             0.4107142857
  2             0.4107142857            -0.0516581633             0.4188402889
a, b, c, x0, eps, max_repeat を入力 :   0             1.0000000000             3.0000000000             0.2500000000
  1             0.2500000000            -1.1250000000             0.4107142857
  2             0.4107142857            -0.0516581633             0.4188402889
a, b, c, x0, eps, max_repeat を入力 : %                                                                                                                            
gatahayato@Gatas-MacBook-Pro O2 % diff -Bw out.txt exp.txt 

out.txtの内容は以下の通りである。
 0.26785714285714284921
 0.41884028892455860138
 0.41884028892455860138

ニュートンラプソン法を使い、f(x)=0の解を求めることができた。
問題文にあった条件で計算を進めることでうまく解を求めることができた。
プロ3で勉強したことを総動員して、オプションに取り組んでいく。

----------------------------------------
[課題2.2]
お見合いの戦略を考えるための， 次のようなシミュレーションを行うプログラム omiai.c を作成した。 設定は次の通りとした.

自分のレベル x は 1〜5 の 5 段階であり, 乱数により 1:2:4:2:1 の割合で決定される． 自分のレベルは自分には分からないという想定である.
お見合いのチャンスは15回である.
各回の相手のレベル y は 1〜5 の 5 段階であり, 乱数により 1:2:4:2:1 の割合で決定される．
各回の相手に yes と言うか no と言うかは, それが何回目のお見合いか (c) と相手のレベル (y) によって決めるものとする． これを決定する関数を int x_accept(int c, int y) とする.
相手が yes と言ってくれる確率 p は, 相手のレベル y と自分のレベル x によって決まり, p = (0.19*x)*(1.1-0.1*y) であるものとする.
両方が yes の場合に結婚が成立する (それ以上のお見合いはしない).
ひとまず,

int x_accept(int c, int y) {return 1;}
として, このお見合いのシミュレーションを 100 回行って，結婚できる確率と, 結婚できる相手のレベルの期待値 (ただし，結婚できなかった場合のレベルは-5 とする) を求めるプログラムを作成せよ. 
次に, 期待値をできるだけ大きくできるような x_accept を考えよ (例えば，最初の5回は相手のレベルが4以上で,それ以降は誰でも yes と言う等).

実行結果は以下の通りである。
gatahayato@Gatas-MacBook-Pro O2 % gcc -Wall omiai.c
gatahayato@Gatas-MacBook-Pro O2 % ./a.out
結婚できる確率: 0.990000
結婚できる相手のレベルの期待値: 2.780000
gatahayato@Gatas-MacBook-Pro O2 % ./a.out
結婚できる確率: 1.000000
結婚できる相手のレベルの期待値: 2.890000
gatahayato@Gatas-MacBook-Pro O2 % ./a.out
結婚できる確率: 0.980000
結婚できる相手のレベルの期待値: 2.740000
gatahayato@Gatas-MacBook-Pro O2 % ./a.out
結婚できる確率: 0.990000
結婚できる相手のレベルの期待値: 2.800000
gatahayato@Gatas-MacBook-Pro O2 % ./a.out
結婚できる確率: 0.990000
結婚できる相手のレベルの期待値: 2.810000
gatahayato@Gatas-MacBook-Pro O2 % ./a.out
結婚できる確率: 0.980000
結婚できる相手のレベルの期待値: 2.760000
gatahayato@Gatas-MacBook-Pro O2 % ./a.out
結婚できる確率: 0.980000
結婚できる相手のレベルの期待値: 2.610000

お見合いの期待値を計算する関数を作成した。
一度目の思考では、全ての相手にYESという様にし、その後、レベルが高い順にYESと言っていく様にすることで、期待値を最大化することができた。
この趣味レーションでは、ほぼ全ての人が結婚できる計算となっており、相手のレベルの期待値は役2.7ほどとなっている。

----------------------------------------
[課題 B2 の感想]
今回の課題では、分割コンパイルを使って関数を作成した。一通りプロ3の内容を勉強した後であったため、
そこまで苦戦することなく作成することができた。課題の振り返りにも記述したが、今まで授業で勉強したことを使い
効率的に課題を作成していきたい。